---
import { site } from '../config';

interface Props {
  title?: string;
  description?: string;
  image?: string;
  article?: {
    publishedTime: string;
    modifiedTime?: string;
    author: string;
    tags: string[];
  };
  canonical?: string;
}

const {
  title = site.name,
  description = site.description,
  image = `${site.url}/og-default.png`,
  article,
  canonical,
} = Astro.props;

const fullTitle = title === site.name ? title : `${title} - ${site.name}`;
const canonicalUrl = canonical || new URL(Astro.url.pathname, site.url).href;
const ogImage = image.startsWith('http') ? image : `${site.url}${image}`;

// JSON-LD structured data
const jsonLd = article
  ? {
      '@context': 'https://schema.org',
      '@type': 'Article',
      headline: title,
      description: description,
      image: ogImage,
      author: {
        '@type': 'Person',
        name: article.author,
      },
      publisher: {
        '@type': 'Organization',
        name: site.name,
        url: site.url,
      },
      datePublished: article.publishedTime,
      dateModified: article.modifiedTime || article.publishedTime,
      mainEntityOfPage: {
        '@type': 'WebPage',
        '@id': canonicalUrl,
      },
      keywords: article.tags.join(', '),
    }
  : {
      '@context': 'https://schema.org',
      '@type': 'WebSite',
      name: site.name,
      description: site.description,
      url: site.url,
    };
---

<!-- SEO Meta Tags -->
<title>{fullTitle}</title>
<meta name="description" content={description} />
<link rel="canonical" href={canonicalUrl} />

<!-- Open Graph -->
<meta property="og:type" content={article ? 'article' : 'website'} />
<meta property="og:title" content={fullTitle} />
<meta property="og:description" content={description} />
<meta property="og:image" content={ogImage} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:site_name" content={site.name} />
<meta property="og:locale" content="id_ID" />

{
  article && (
    <>
      <meta property="article:published_time" content={article.publishedTime} />
      {article.modifiedTime && (
        <meta property="article:modified_time" content={article.modifiedTime} />
      )}
      <meta property="article:author" content={article.author} />
      {article.tags.map((tag) => (
        <meta property="article:tag" content={tag} />
      ))}
    </>
  )
}

<!-- Twitter Card -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={fullTitle} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={ogImage} />

<!-- Additional Meta Tags -->
<meta name="robots" content="index, follow" />
<meta name="language" content="Indonesian" />

<!-- JSON-LD Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
