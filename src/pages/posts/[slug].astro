---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { calculateReadingTime } from '../../utils/readingTime';
import ShareButtons from '../../components/ShareButtons.astro';
import GiscusComments from '../../components/GiscusComments.astro';

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

interface Props {
  post: CollectionEntry<'posts'>;
}

const { post } = Astro.props;
const { Content } = await post.render();

// Calculate reading time
const readingTime = calculateReadingTime(post.body);

// Get related posts by tags
const allPosts = await getCollection('posts');
const relatedPosts = allPosts
  .filter((p) => p.slug !== post.slug && p.data.tags.some((tag) => post.data.tags.includes(tag)))
  .slice(0, 3);
---

<Layout
  title={post.data.title}
  description={post.data.summary}
  image={post.data.coverImage}
  article={{
    publishedTime: post.data.publishedAt.toISOString(),
    modifiedTime: post.data.updatedAt?.toISOString(),
    author: post.data.author,
    tags: post.data.tags,
  }}
>
  <main class="container mx-auto px-4 py-8">
    <article class="mx-auto max-w-4xl">
      <header class="mb-8">
        {
          post.data.coverImage && (
            <img
              src={post.data.coverImage}
              alt={post.data.title}
              class="mb-6 h-64 w-full rounded-lg object-cover"
            />
          )
        }

        <h1 class="mb-4 text-4xl font-bold">{post.data.title}</h1>

        <div class="mb-4 flex items-center text-sm text-gray-600 dark:text-gray-400">
          <span>By {post.data.author}</span>
          <span class="mx-2">•</span>
          <time datetime={post.data.publishedAt.toISOString()}>
            {new Date(post.data.publishedAt).toLocaleDateString('id-ID')}
          </time>
          <span class="mx-2">•</span>
          <span>{readingTime} min read</span>
        </div>

        <div class="mb-6 flex flex-wrap gap-2">
          {
            post.data.tags.map((tag) => (
              <a
                href={`/tags/${tag}`}
                class="rounded-full bg-blue-100 px-3 py-1 text-sm text-blue-800 dark:bg-blue-900 dark:text-blue-200"
              >
                {tag}
              </a>
            ))
          }
        </div>
      </header>

      <div class="prose prose-lg dark:prose-invert max-w-none">
        <Content />
      </div>

      <ShareButtons title={post.data.title} url={`/posts/${post.slug}`} />

      {
        relatedPosts.length > 0 && (
          <section class="mt-12">
            <h2 class="mb-6 text-2xl font-bold">Related Posts</h2>
            <div class="grid grid-cols-1 gap-6 md:grid-cols-3">
              {relatedPosts.map((relatedPost) => (
                <a
                  href={`/posts/${relatedPost.slug}`}
                  class="block rounded-lg border p-4 transition-shadow hover:shadow-md"
                >
                  <h3 class="mb-2 font-semibold">{relatedPost.data.title}</h3>
                  <p class="text-sm text-gray-600 dark:text-gray-400">{relatedPost.data.summary}</p>
                </a>
              ))}
            </div>
          </section>
        )
      }

      <GiscusComments />
    </article>
  </main>
</Layout>
